#!/usr/bin/env python3
# encoding: utf-8

import sys
import os

from optparse import OptionParser

import matplotlib as mpl
import numpy as np


parser = OptionParser(usage="usage: %prog [options] <results.csv>")
parser.add_option("-s",
                  action="store_true",
                  dest="show",
                  default=False,
                  help="show the plot")
parser.add_option("-n",
                  action="store_true",
                  dest="no_fig",
                  default=False,
                  help="do not save an output figure")
parser.add_option("-o",
                  action="store",
                  dest="figure",
                  help="set the name of the output PNG figure")
parser.add_option("-t",
                  action="store",
                  dest="title",
                  help="set the title of the plot")
parser.add_option("-f",
                  action="store_true",
                  dest="fit",
                  help="fit the plot")
options, args = parser.parse_args()

if len(args) != 1:
    parser.error("bad number of arguments")

results_file = args[0]

base_name = os.path.basename(results_file)
name = os.path.splitext(base_name)[0]

if options.title:
    title = options.title
else:
    title = name

if options.figure:
    output_fig = options.figure
else:
    output_fig = name + ".png"

cores = []
rates = []

with open(results_file) as f:
    for line in f:
        line = line.strip()
        if not line:
            continue
        values = line.split(";")
        if len(values) != 4:
            print("Bad formatted line: {}".format(line.strip()))
            sys.exit(1)
        num_cores = int(values[0])
        times = [float(i) for i in values[-3:]]
        avg_time = sum(times) / 3
        rate = 1 / avg_time
        cores.append(num_cores)
        rates.append(rate)

if not options.show:
    mpl.use('Agg')
import matplotlib.pyplot as plt  # noqa: E402

plt.title(title)
plt.xlabel("Cores")
plt.ylabel("Event rate (kHz)")

plt.plot(cores, rates, 'ro')

if options.fit:
    pl = np.polyfit(cores, rates, 1)
    cr = np.corrcoef(cores, rates)[0, 1]
    r2 = cr ** 2

    print("y = {:.4f}x + {:.4f}".format(pl[0], pl[1]))
    print("R^2 = {:.4f}".format(r2))
    print()

    polynomial = np.poly1d(pl)

    plt.plot(cores, polynomial(cores))

    text = "$y = {:.4f}x + {:.4f}$\n$R^2 = {:.4f}$".format(pl[0], pl[1], r2)
    plt.text(0.6, 0.3, text, transform=plt.gca().transAxes)

axes = plt.gca()
axes.set_axisbelow(True)
axes.xaxis.grid(color='gray')
axes.yaxis.grid(color='gray')

one_rate = rates[0] / cores[0]
exp_rate = one_rate * cores[-1]
max_rate = max(exp_rate, rates[-1])
axes.set_ylim([0, max_rate])

if not options.no_fig:
    plt.savefig(output_fig)
    print("Plot saved to {}".format(output_fig))

if options.show:
    plt.show()
