#!/usr/bin/env bash

# Run a stress test with all the combinations of cores.

##############################################################################
# Setup
##############################################################################

test_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
clara_version="$("$CLARA_HOME"/bin/j_dpe --version 2>/dev/null | sed 's/CLARA version //')"
num_cores="$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)"

# shellcheck source=/dev/null
source "$test_dir/lib/common-utils"
mailto="$(get_mail "$test_dir")"

##############################################################################
# Helpers
##############################################################################

function run_orchestrator()
{
    "$CLARA_HOME/bin/clara-orchestrator" "$@"
}

function generate_cores()
{
    if [[ $cores_first -eq 1 ]]; then
        if [[ $cores_step -eq 1 ]]; then
            seq 1 "$cores_max"
        else
            echo 1
            seq "$cores_step" "$cores_step" "$cores_max"
        fi
    else
        seq "$cores_first" "$cores_step" "$cores_max"
    fi
}

function send_report()
{
    if [[ $send_mail -eq 0 && $(uname) != Darwin ]]; then
        if [[ $dry_run -eq 0 ]]; then
            echo "Report sent to $mailto"
        else
            "$test_dir"/lib/send-mail "$mailto" "$results_file" "$run_log" "$1"
        fi
    fi
}

##############################################################################
# Check the arguments
##############################################################################

usage()
{
    cat << EOF
usage:

    $(basename "$0") [ OPTIONS ] <services_file> <input_file> <output_file>

options:

    -b <cores>                  --  initial number of cores to be used
                                    (default: 1)

    -s <cores>                  --  the increase step of the number of cores
                                    (default: 1)

    -t <cores>                  --  final number of cores to be used
                                    (default: $num_cores)

    -e <maxEvents>               -- the maximum number of events to process

    -o <log_dir>                --  output directory where results will be saved
                                    (default: ./log)

    -m                          --  send a mail with the results

    -a <mail_address>           --  where to to send the report email
                                    (default: $USER@jlab.org)

    -n                          --  dry run
EOF
}

cores_first=1
cores_step=1
cores_max=$num_cores

max_events=

log_dir=${CLARA_TEST_LOGDIR:-$test_dir/log}
send_mail=1
dry_run=1

while getopts "b:s:t:e:f:o:ma:nh" OPTION
do
    case $OPTION in
        h)
            usage; exit 0 ;;
        b)
            cores_first=$OPTARG ;;
        s)
            cores_step=$OPTARG ;;
        t)
            cores_max=$OPTARG ;;
        e)
            max_events=$OPTARG ;;
        f)
            fe_name=$OPTARG ;;
        o)
            log_dir=$OPTARG ;;
        m)
            send_mail=0 ;;
        a)
            mailto=$OPTARG ;;
        n)
            dry_run=0 ;;
        ?)
            echo; usage; exit 1 ;;
    esac
done

shift $((OPTIND-1))
if [[ ! $# -eq 3 ]]; then
    usage
    exit 1
fi

services="$1"
infile="$2"
outfile="$3"

if [ ! -f "$services" ]; then
    echo "Services file doesn't exist."
    exit 1
fi

if [ ! -f "$infile" ]; then
    echo "Input file doesn't exist."
    exit 1
fi

##############################################################################
# Run the test
##############################################################################

mkdir -p "$log_dir"
results_file=$log_dir/results.csv
run_log=$log_dir/run.log

orch_args=()
test -n "$fe_name" && orch_args+=(-f "$fe_name")
test -n "$max_events" && orch_args+=(-e "$max_events")
orch_args+=("$services")
orch_args+=("$infile")
orch_args+=("$outfile")

if [[ $dry_run -eq 1 ]]; then
    echo "Running a warm up reconstruction with all cores"
    run_orchestrator -t "$cores_max" "${orch_args[@]}" 2>&1 | tee "$run_log"
    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        touch "$results_file"
        send_report 1
        exit 1
    fi
fi

rm -f "$results_file"
rm -f "$run_log"

cat << EOF > "$run_log"
==========================================
            CLARA stress-test
==========================================
 CLARA home       = $CLARA_HOME
 CLARA version    = $clara_version
 Start time       = $(date +"%Y-%m-%d %H:%M:%S")
 Host             = $(hostname -s)
 Services file    = $services
 Input file       = $infile
 Output file      = $outfile
==========================================
EOF

for t in $(generate_cores); do
    echo "Requesting $t threads"
    result="$t"
    [[ $dry_run -eq 0 ]] && continue

    for _ in $(seq 1 3); do
        if ! run_orchestrator -t "$t" "${orch_args[@]}" >> "$run_log" 2>&1; then
            tail -20 "$run_log"
            send_report 1
            exit 1
        fi
        sleep 1
        avg_time="$(grep "Average processing time" "$run_log" | tail -n 1 | awk '{ print $7 }')"
        result="$result;$avg_time"
    done

    echo "$result" >> "$results_file"
done
[[ $dry_run -eq 1 ]] && echo >> "$results_file"

echo "Test completed."
echo "Results can be found in: $results_file"
send_report 0
