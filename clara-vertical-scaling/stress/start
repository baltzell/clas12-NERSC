#!/usr/bin/env bash

##############################################################################
# Setup
##############################################################################

test_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
tmux="tmux"
session="TEST"

# shellcheck source=/dev/null
source "$test_dir/lib/common-utils"
check_tmux

##############################################################################
# Options
##############################################################################

function usage()
{
    echo -e "Usage:"
    echo -e "\\t$0 [ -f <nodes_file> ] <num_nodes>"
}


keep_detached=1
monitor=1
fe_host="$(get_fe_host)"
log_dir="${CLARA_TEST_LOGDIR:-$test_dir/log}"

while getopts "hdf:a:o:m" OPTION
do
    case $OPTION in
        h)
            usage; exit 0 ;;
        d)
            keep_detached=0 ;;
        m)
            monitor=0 ;;
        f)
            nodes_file=$OPTARG ;;
        a)
            fe_host=$OPTARG ;;
        o)
            log_dir=$OPTARG ;;
        ?)
            echo; usage; exit 1 ;;
    esac
done

shift $((OPTIND-1))
if [[ $# -gt 1 ]]; then
    usage
    exit 1
fi

##############################################################################
# Define the list of nodes to be used
##############################################################################

number_of_nodes=${1:-0}
if [[ $number_of_nodes -lt 0 ]]; then
    echo "Wrong number of nodes: $number_of_nodes"
    exit 1
fi

case "$(hostname -s)" in
    "head")
        nodes_file=$test_dir/nodes/quark.list
        ;;
    "claradm")
        echo "Running on claradm. Only the local front-end can be used."
        nodes_file=
        number_of_nodes=0
        ;;
    *)
        echo "Running on local node. Only the local front-end can be used."
        fe_host=localhost
        nodes_file=
        number_of_nodes=0
        ;;
esac

if [[ $number_of_nodes -gt 0 ]]; then
    if [[ -z $nodes_file ]]; then
        echo "A file with the list of available nodes is required."
        echo "See nodes/quark.list as an example."
        echo
        usage
        exit 1
    fi
    echo "nodes_file=$nodes_file"
    IFS=$'\r\n' GLOBIGNORE='*' command eval "nodes=(localhost $(cat "$nodes_file"))"
else
    echo "Running everything on front-end node. No extra DPEs will be deployed."
    nodes=()
fi
echo "---"

##############################################################################
# Start from a clean session
##############################################################################

# Remove any existing tmux session first
"$test_dir"/quit

cd "$test_dir" || exit
mkdir -p "$log_dir"
rm -f "$log_dir"/*

CLARA_TEST_LOGDIR="$log_dir"
export CLARA_TEST_LOGDIR

##############################################################################
# Start the FE and the DPEs
##############################################################################

function new_window()
{
    $tmux new-window -d -t "$session:$1" -n "$2"
    $tmux setw -t "$session:$1" pane-base-index 0
}

function split_window()
{
    for (( i=0; i<=number_of_nodes; i++ )); do
        $tmux split-window -v -t "$session:$1"
        $tmux select-layout -t "$session:$1" tiled
    done
}

function connect_nodes()
{
    for (( i=1; i<=number_of_nodes; i++ )); do
        $tmux send-keys -t "$session:$1.$i" " ssh ${nodes[$i]}" "C-m"
    done
}

function start_clara()
{
    $tmux send-keys -R -t "$session:$1.0" \
            " $test_dir/lib/run-fe $CLARA_HOME $fe_host $log_dir" "C-m"
    for (( i=1; i<=number_of_nodes; i++ )); do
        $tmux send-keys -R -t "$session:$1.$i" \
                " $test_dir/lib/run-dpe $CLARA_HOME $fe_host $log_dir" "C-m"
    done
}

function start_monitoring()
{
    for (( i=1; i<=number_of_nodes; i++ )); do
        $tmux send-keys -R -t "$session:$1.$i" \
                " ssh -t ${nodes[i]} $test_dir/lib/monitor-dpe" "C-m"
    done
}


if ! $tmux has-session -t "$session" 2>/dev/null; then
    if [ -e ~/.tmux.conf ]; then
        $tmux new-session -s "$session" -n test -d
    else
        $tmux -f "$test_dir/lib/tmux.conf" new-session -s "$session" -n test -d
    fi

    rec_window=1
    $tmux setw -t "$session:$rec_window" pane-base-index 0

    split_window $rec_window
    connect_nodes $rec_window
    start_clara $rec_window

    if [[ $monitor -eq 0 ]]; then
        mon_window=2
        new_window $mon_window monitor
        split_window $mon_window
        connect_nodes $mon_window
        start_monitoring $mon_window
    fi

    orch_pane=$((number_of_nodes + 1))
    if [ $number_of_nodes -eq 0 ]; then
        $tmux send-keys -t "$session:$rec_window.$orch_pane" "./run-local"
    else
        $tmux send-keys -t "$session:$rec_window.$orch_pane" "./run-cloud"
    fi
    $tmux select-window -t "$session:$rec_window"
    $tmux select-pane -t "$session:$rec_window.$orch_pane"
fi

if [[ $keep_detached -eq 1 ]]; then
    $tmux -2 attach-session -t "$session"
fi
